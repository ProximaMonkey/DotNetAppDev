Приложение: Сапер;
Базовые технологии: .NET/WPF 4.5+;
Основная архитектура кодовой базы: Model-View-ViewModel;
Требования к сборке: devenv v.14+ (Visual Studio 2015 и выше), PostSharp Tools 4.3+.
   (можно просто взять собранный релиз отсюда - Out.7z);

Проект AppDev.Sapper.Utils.UI
-------------------------------------------------------------------------------------------------------------------------------
CellPanel:
	Пользовательская панель для размещения дочерних элементов по прямоугольнику
	(то, что в Java называется диспетчером компоновки).

CellImageConverter:
	Конвертер значений для XAML, отображающий состояние ячейки в соответствующее
	изображение.

	PS: Здесь я не использую низкоуровневый холст для рисования и т.н. программирование
	на визуальном уровне (он же код рисования в графическом контекте). Для разных
	языков и платформ подобное рисование примитивов мало чем отличается. Здесь выбрана
	"золотая" середина между Grid'ом и рисованием в коде, т.к. минное поле тут - это прежде
	всего элемент управления с данными, лишенный внешнего вида. Объект данных есть
	модель ячейки с конечным набором состояний.
	Если интересно как я программирую на визуальном уровне, можно посмотреть тут,
	когда-то давно я уже писал нечто подобное, только на Java и на JavaScript:
	- https://github.com/dwinner/JavaAppDev/blob/master/%2B%20Apps/JavaMiner/_09_final_program/Saper.java	
	- https://github.com/dwinner/WebClientAppDev/tree/master/JavaScript/jsPrograms/my_projects/JS%20Miner/WebMiner.Current

AppDev.Sapper.Model
-------------------------------------------------------------------------------------------------------------------------------
MineImageFileAttribute:
	Атрибут для прозрачной ассоциации состояния ячейки и изображением, примененный к
	полю в перечислении.

GameStatusAttribute:
	Атрибут для прозрачной ассоциации статуса игры и описанием этого статуса,
   примененный к полю в перечислении.
   
MinefieldCellState:
   Состояние ячейки.
   
GameStatus:
   Статус игры.
   
FieldInfoExtensions:
   Методы расширения для отражающего класса FieldInfo.
   
GameStatusExtensions:
   Методы расширения для статуса игры.
   
MinefieldCellStateExtensions:
   Методы расширения для состояния ячейки.
   
MinefieldCell:
   Модель ячейки с миной.
   
MinefieldCellViewModel:
   Модель ячейки с поддержкой pull-уведомлений. Неявно
   используется в качестве адаптера для модели.
   
MinefieldCellCollection:
   Контейнер для модели ячейки. Создан в качестве удобной
   оболочки над интерфейсом IEnumerable<MinefieldCellViewModel>.
   
FodyWeavers.xml:
   Конфигуратор IL-инжектора для аспектов бибилиотеки ReactiveUI,
   таких как атрибут [Reactive], к примеру.
   
PS: Я активно использую аспектно-ориентированное программирование в своих
   проектах, т.к. стараюсь избегать boilerplate-кода (ибо Don't repeat yourself).
   Плюсы очевидны - 60-80% рутинного кода удается избежать и добиться
   разделения ответственности на разных слоях приложения. Минусы довольно
   незначительны и быстро устраняются, но есть: начальные проблемы со сборкой,
   развертыванием, плюс время на конфигурирования Countinous integration server'а.
   
AppDev.Sapper.MinefieldControl
-------------------------------------------------------------------------------------------------------------------------------
Minefield:
   Элемент управления для минного поля без внешнего вида.
   Обратите внимание, что есть маршрутизируемые события, но
   они не используются извне. Это хороший знак - значит в коде
   нет workaround'ов для обхода уведомлений вне модели представления.
   Однако я их оставил. Время от времени случаются ситуации, когда
   "костыли" нужны, чтобы быстро что-то сделать и оставить потомкам
   как технический долг для рефакторинга.
   
minefieldListBox.xaml:
   UI-Шаблон по-умолчанию для UI-контейнера отдельных ячеек.
   
minefield.xaml:
   UI-Шаблон по-умолчанию для минного поля.
   
AppDev.Sapper.AppLoader
-------------------------------------------------------------------------------------------------------------------------------
IGameFieldFactory:
   Интерфейс для логики создания минного поля.
   
DefaultGameFieldFactory:
   Реализация по-умолчанию интерфейса IGameFieldFactory.
   
AutomapperConfig:
   Конфигуратор для mapping'а модели в модель представления и обратно.
   
CompositionRoot:
   Корень компоновки для внедрения зависимостей. Обратите
   внимание, что я имею ввиду именно внедрение зависимостей,
   а не сервис-локатор. Здесь подобные детали не важны, однако
   в общем случае разница важна.
   
SapperWindow.xaml:
   Представление главного окна.

SapperWindowViewModel:
   Модель представления главного окна. Здесь жестко-закодированы
   значения для размера минного поля и максимального кол-ва мин,
   но привязать ввод этих значений не долго.
   
PS: В качестве MVVM-framework'а используется ReactiveUI - он
   ничем не лучше и не хуже других (Caliburn, Prism, DevExpress Mvvm),
   просто я люблю функциональное программирование и pull-модель
   уведомлений.